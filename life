#!/bin/bash
dbg=""
# Program "neo" displays digital rain effect in the terminal
# Copyright (C) 2022  DrHoneydew78
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# branch test
Usage () {
cat <<ENDOFUSAGE
Usage: life -h | -H
  -h        : Display usage and exit
  -H        : Display extended help

Usage: life [-y set]... [[-s] color] [-t color] [[-n] number] [-g lag [-G lag]]
           [-d time -D time] [-l len -L len] [-T stab] [-b] [-a delay]
  -y set    : Set of glyphs to include (see -H for glyph sets)
  -s color  : Spark color (see -H for color spec)
  -t color  : Tail color (see -H for color spec)
  -n number : Number of sparks
  -g lag    : Max lag before spark reappears
  -G lag    : Initial lag before spark appears
  -d time   : Min spark drop time
  -D time   : Max spark drop time
  -l len    : Min tail length
  -L len    : Max tail length
  -T stab   : Tail stability factor
  -b        : User alternate screen buffer
  -a delay  : Artificial delay factor
ENDOFUSAGE
}

Help () {
declare bon=""
declare bof=""
bon="$(tput bold)"
bof="$(tput sgr0)"
Usage
cat <<ENDOFHELP

${bon}PROGRAM DESCRIPTION${bof}

ENDOFHELP
}

UsageErr() {
  echo "ERROR: ${1:-No error specified}" >&2
  Usage >&2
  exit "${2:-1}"
}

declare OptAltBuffer=1
while getopts ":hHb" OPTION ; do
  case $OPTION in
    ('h') Usage ; exit 0 ;;
    ('H') Help ; exit 0 ;;
    #('s') OptSparkColor="$OPTARG"  ;;
    ('b') OptAltBuffer=""           ;;
    (':') UsageErr "option requires an argument -- $OPTARG" ;;
    ('?') UsageErr "illegal option -- $OPTARG" ;;
  esac
done
shift $((OPTIND-1))

declare -r AnsiColors="black:red:green:yellow:blue:magenta:cyan:white"

ParseColor () {
  local c="${1,,}"
  local a=""
  if [[ "$c" = mono ]] ; then
    [[ "$c" = "$1" ]] && tput sgr0
    [[ "$c" != "$1" ]] && tput bold
    return 0
  fi
  if [[ :"$AnsiColors": == *:"$c":* ]] ; then
    case "$c" in
      (black  ) a=0 ;;
      (red    ) a=1 ;;
      (green  ) a=2 ;;
      (yellow ) a=3 ;;
      (blue   ) a=4 ;;
      (magenta) a=5 ;;
      (cyan   ) a=6 ;;
      (white  ) a=7 ;;
    esac
    [[ "$c" = "$1" ]] && tput setaf $a
    [[ "$c" != "$1" ]] && tput setaf $((a+8))
    return 0
  fi
  if [[ "$c" =~ ^[0-5]{3}$ ]] ; then
    tput setaf $((${c:0:1}*36+${c:1:1}*6+${c:2:1}+16))
    return 0
  fi
  if [[ "$c" =~ ^[[:digit:]]{1,2}$ && "$c" -ge 0 && "$c" -le 23 ]] ; then
    tput setaf $((c+232))
    return 0
  fi
  UsageErr "Invalid color specification value: $1"
}

(($#)) && \
  UsageErr "Arbitrary parameters not allowed"

declare -i SizeX=0
declare -i SizeY=0
SizeX="${COLUMNS:-$(tput cols)}"
SizeY="${LINES:-$(tput lines)}"
[[ "$SizeX" && "$SizeX" -gt 0 && "$SizeY" && "$SizeY" -gt 0 ]] || \
  UsageErr "Could not determine terminal size"

declare MainColor=""
declare ResetColor=""
MainColor="$(tput setab 7)"
ResetColor="$(tput sgr0)"


ExitTrap () {
  ((OptAltBuffer)) && tput rmcup
  tput sgr0
  tput rc
  tput el
  tput cnorm
  stty echo
}
trap 'exit 1' INT TERM
trap ExitTrap EXIT

tput sc
((OptAltBuffer)) && tput smcup
stty -echo
tput civis
#((OptAltBuffer)) && tput clear
tput clear

((dbg)) && declare dbg_size=$((SizeY-10))
((dbg)) && SizeY=10 SizeX=40
((dbg)) && declare dbg_start=1
((dbg)) && Debug () {

  local i=0
  if ((dbg_start)) ; then
    dbg_start=""
    tput setaf 3
    for ((i=0; i<dbg_size; i++)) ; do
      tput cup $((SizeY+i)) 0 ; tput el
    done
    tput cup $((SizeY)) 0
  fi
  
  if [[ "$1" == "-p" ]] ; then
    tput sgr0
    dbg_start=1
    read -s -n1
    return
  fi
  
  "$@"
  
}

Life () {

  ((dbg)) && { tput cup 0            0            ; printf X ; }
  ((dbg)) && { tput cup $((SizeY-1)) 0            ; printf X ; }
  ((dbg)) && { tput cup 0            $((SizeX-1)) ; printf X ; }
  ((dbg)) && { tput cup $((SizeY-1)) $((SizeX-1)) ; printf X ; }
  
  local -Ai Evn=() Odd=()
  local i=""
  local -i ii=0
  local -i xh=0
  local -i xi=0
  local -i xj=0
  local -i yh=0
  local -i yi=0
  local -i yj=0
  local -i Gen=0
  local -a Spawn=() Death=()
  local -A PosCache=()

  if ((0==1)) ; then
    local -a V=()
    #V+=(16,6,1,1)
    V+=(20,13,-1,-1)
    for v in "${V[@]}" ; do 
      IFS=, read x y w z <<< "$v"
      Evn+=([$((x-w)) $((y-z))]=0 [$((x+0)) $((y-z))]=0 [$((x+w)) $((y-z))]=3
            [$((x-w)) $((y+0))]=3 [$((x+0)) $((y-z))]=0 [$((x+w)) $((y+0))]=3
            [$((x-w)) $((y+z))]=0 [$((x+0)) $((y+z))]=3 [$((x+w)) $((y+z))]=3)
    done
  fi
  if ((0==0)) ; then
    local -a V=()
    #V+=(16,6,1,1)
    V+=($((SizeX/2)),$((SizeY/2)),1,1)
    for v in "${V[@]}" ; do 
      IFS=, read x y w z <<< "$v"
      Evn+=([$((x-w)) $((y-z))]=0 [$((x+0)) $((y-z))]=3 [$((x+w)) $((y-z))]=3
            [$((x-w)) $((y+0))]=3 [$((x+0)) $((y+0))]=3 [$((x+w)) $((y+0))]=0
            [$((x-w)) $((y+z))]=0 [$((x+0)) $((y+z))]=3 [$((x+w)) $((y+z))]=0)
    done
  fi
  # Any live cell with two or three live neighbours survives.
  # Any dead cell with three live neighbours becomes a live cell.
  # All other live cells die in the next generation. Similarly, all other dead cells stay dead.
  while :; do
    Spawn=()
    Death=()

      Odd=()
      for i in "${!Evn[@]}" ; do
        ii=${Evn[$i]}
        if ((ii==12 || ii==13 || ii==3)) ; then
          read xi yi <<< "$i"
          ((xh=xi-1 , xj=xi+1 , yh=yi-1 , yj=yi+1))
          Odd[$xh $yh]+=1  Odd[$xi $yh]+=1  Odd[$xj $yh]+=1
          Odd[$xh $yi]+=1  Odd[$xi $yi]+=10 Odd[$xj $yi]+=1
          Odd[$xh $yj]+=1  Odd[$xi $yj]+=1  Odd[$xj $yj]+=1
          ((ii==3 && xi>=0 && xi<SizeX && yi>=0 && yi<SizeY)) && \
            Spawn+=("${PosCache[$i]:="$(tput cup $yi $xi)"}")
        elif ((ii>=10)) ; then
          read xi yi <<< "$i"
          ((xi>=0 && xi<SizeX && yi>=0 && yi<SizeY)) && \
            Death+=("${PosCache[$i]:="$(tput cup $yi $xi)"}")
        fi
      done
    
    for i in "${!Spawn[@]}" ; do
      printf %s%s "${Spawn[$i]}" "@"
    done
    for i in "${!Death[@]}" ; do
      printf %s%s "${Death[$i]}" " "
    done
    
    ((dbg)) && Debug declare -p Spawn Death Evn Odd
    ((dbg)) && Debug -p
    
    ((dbg)) || read -s -n1
    
    Evn=()
    for i in "${!Odd[@]}" ; do
      Evn[$i]="${Odd[$i]}"
    done

  done
}

Life
